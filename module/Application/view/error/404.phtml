<?php

/**
 * This file is part of web-design-set with Laminas MVC framework
 * 
 * This is the error/404 template of this web application
 * 
 * @package    Application
 * @author     Niklaus Höpfner <editor@nik-web.net>
 * @copyright  Copyright (c) Niklaus Höpfner
 * @link       https://github.com/nik-web/web-design-set
 * @license    https://opensource.org/licenses/BSD-3-Clause The BSD-3-Clause License
 * @version    1.0.0
 * @since      1.0.0
 */

declare(strict_types=1);

namespace Application;

use Laminas\Mvc\Application;

$this->headTitle('Ein 404 Fehler ist aufgetreten');
$description = 'Ein 404 Fehler ist aufgetreten, die aufgerufene Seite wurde nicht gefunden!';
$keywords = 'Webanwendung, 404, Fehlerseite,';
$this->headMeta()->appendName('description', $description)
    ->appendName('keywords', $keywords);

if (!$this->display_exceptions) {
?>
<header id="main-header">
    <h1>
        Ein 404 Fehler ist aufgetreten
    </h1>
    <p class="main-header-p">
        Die aufgerufene Seite wurde nicht gefunden!
    </p>
</header>
<figure style="text-align: center;">
    <pre role="img" aria-label="ASCII CAT">
    &lt;   Can't find this page.   &gt;

      ,-.       _,---._ __  / \
     /  )    .-'       `./ /   \
    (  (   ,'            `/    /|
     \  `-"             \'\   / |
      `.              ,  \ \ /  |
       /`.          ,'-`----Y   |
      (            ;        |   '
      |  ,-.    ,-'         |  /
      |  | (   |            | /
      )  |  \  `.___________|/
      `--'   `--'
    </pre>
</figure>
<?php
} else {
?>    
<h1>A 404 error occurred</h1>
<h2><?= $this->message ?></h2>
<?php if (! empty($this->reason)) :
    switch ($this->reason) {
        case Application::ERROR_CONTROLLER_CANNOT_DISPATCH:
            $reasonMessage = 'The requested controller was unable to dispatch the request.';
            break;
        case Application::ERROR_MIDDLEWARE_CANNOT_DISPATCH:
            $reasonMessage = 'The requested middleware was unable to dispatch the request.';
            break;
        case Application::ERROR_CONTROLLER_NOT_FOUND:
            $reasonMessage = 'The requested controller could not be mapped to an existing controller class.';
            break;
        case Application::ERROR_CONTROLLER_INVALID:
            $reasonMessage = 'The requested controller was not dispatchable.';
            break;
        case Application::ERROR_ROUTER_NO_MATCH:
            $reasonMessage = 'The requested URL could not be matched by routing.';
            break;
        default:
            $reasonMessage = 'We cannot determine at this time why a 404 was generated.';
            break;
    }
?>
<p><?= $reasonMessage ?></p>
<?php endif ?>

<?php if (! empty($this->controller)) : ?>
<dl>
    <dt>Controller:</dt>
    <dd>
        <?= $this->escapeHtml($this->controller) ?>
        <?php
        if (! empty($this->controller_class) && $this->controller_class != $this->controller) {
            printf('(resolves to %s)', $this->escapeHtml($this->controller_class));
        }
        ?>
    </dd>
</dl>
<?php endif ?>

<?php if (! empty($this->display_exceptions)) : ?>
    <?php if (isset($this->exception) && $this->exception instanceof \Throwable) : ?>
<hr/>

<h2>Additional information:</h2>
<h3><?= get_class($this->exception) ?></h3>
<dl>
    <dt>File:</dt>
    <dd>
        <pre><?= $this->exception->getFile() ?>:<?= $this->exception->getLine() ?></pre>
    </dd>
    <dt>Message:</dt>
    <dd>
        <pre><?= $this->escapeHtml($this->exception->getMessage()) ?></pre>
    </dd>
    <dt>Stack trace:</dt>
    <dd>
        <pre><?= $this->escapeHtml($this->exception->getTraceAsString()) ?></pre>
    </dd>
</dl>

        <?php if ($ex = $this->exception->getPrevious()) : ?>
<hr/>

<h2>Previous exceptions:</h2>
<ul class="list-unstyled">
            <?php $icount = 0 ?>
            <?php while ($ex) : ?>
    <li>
        <h3><?= get_class($ex) ?></h3>
        <dl>
            <dt>File:</dt>
            <dd>
                <pre><?= $ex->getFile() ?>:<?= $ex->getLine() ?></pre>
            </dd>
            <dt>Message:</dt>
            <dd>
                <pre><?= $this->escapeHtml($ex->getMessage()) ?></pre>
            </dd>
            <dt>Stack trace:</dt>
            <dd>
                <pre><?= $this->escapeHtml($ex->getTraceAsString()) ?></pre>
            </dd>
        </dl>
    </li>
                <?php
                $ex = $ex->getPrevious();
                if (++$icount >= 50) {
                    echo '<li>There may be more exceptions, but we do not have enough memory to process it.</li>';
                    break;
                }
                ?>
            <?php endwhile ?>
</ul>
        <?php endif ?>
    <?php else : ?>
<h3>No Exception available</h3>
    <?php endif ?>
<?php
endif 
?>
<?php } ?>
